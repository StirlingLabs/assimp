name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_call:
    inputs:
      ref:
        description: Reference to use for checking out
        default: ${{ github.sha }}
        type: string

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  job:
    name: Build & Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # For Windows msvc, for Linux and macOS let's use the clang compiler.
        name: [macos-latest-clang, windows-latest-msvc, ubuntu-latest-clang]
        include:
          - name: windows-latest-msvc
            os: windows-latest
            cxx: cl.exe
            cc: cl.exe
            artifact: true
          - name: ubuntu-latest-clang
            os: ubuntu-latest
            cxx: clang++
            cc: clang
            artifact: true
          - name: macos-latest-clang
            os: macos-latest
            cxx: clang++
            cc: clang
            artifact: true

    env: 
      workingDir: build

    defaults:
      run:
        shell: bash

    steps:
    - name: Determine Reference
      id: version
      env:
        ref: ${{ inputs.ref }}
        sha: ${{ github.sha }}
      run: |
        if [ "$ref" == "" ] ; then
          ref=$sha
        fi
        echo "ref=$ref" >> $GITHUB_OUTPUT

    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.version.outputs.ref }}
        submodules: true
    
    - name: Install Dependencies
      run: |
        case "${RUNNER_OS}" in
          Linux)    sudo apt install ninja-build ;;
          macOS)    brew install ninja ;;
          Windows)  choco install ninja ;;
          *)        echo "Do not recognise ${RUNNER_OS}." && exit 1 ;;
        esac
      env:
        HOMEBREW_NO_ENV_HINTS: true

    - uses: ilammy/msvc-dev-cmd@v1

    - name: Cache DX SDK
      id: dxcache
      if: contains(matrix.name, 'windows')
      uses: actions/cache@v3
      with:
        path: '${{ github.workspace }}/DX_SDK'
        key: ${{ runner.os }}-DX_SDK
        restore-keys: |
          ${{ runner.os }}-DX_SDK

    - name: Download DXSetup
      if: contains(matrix.name, 'windows') && steps.dxcache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        curl -s -o DXSDK_Jun10.exe --location https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe
        .\DXSDK_Jun10.exe /U /O /F /S /P "${{ github.workspace }}\DX_SDK"
        dir /w 
    - name: Set macOS specific CMake arguments
      if: runner.os == 'macOS'
      id: macos_extra_cmake_args
      run: |
        echo "args=-DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'" >> $GITHUB_OUTPUT
      env:
        matrixName: ${{ matrix.name }}
    
    - name: Set Windows specific CMake arguments
      if: runner.os == 'Windows'
      id: windows_extra_cmake_args
      run: echo "args=-DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DASSIMP_BUILD_ASSIMP_VIEW=OFF"  >> $GITHUB_OUTPUT
    
    - name: Configure & Build
      run: |
        mkdir $workingDir && cd $workingDir
        # Note: each instance of args is empty if not building for that platform
        cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ${{ steps.windows_extra_cmake_args.outputs.args }} ${{ steps.macos_extra_cmake_args.outputs.args }}
        cmake --build . -- -j 24 -v
      env:
        DXSDK_DIR: '${{ github.workspace }}/DX_SDK'

    - name: Test
      run: |
        cd build/bin
        ./unit

    - name: Debug
      env:
        matrixJson: ${{ toJson(matrix) }}
        artifact: ${{ matrix.artifact }}
      run: echo "$matrixJson"

    - uses: actions/upload-artifact@v3
      if: matrix.artifact == true
      with:
        name: 'assimp-${{ matrix.name }}'
        path: build/bin/*
